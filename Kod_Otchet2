def bellman_ford(graph, source):
    # Шаг 1: Инициализация расстояний
    distance = {node: float('inf') for node in graph}
    predecessor = {node: None for node in graph}
    distance[source] = 0

    # Шаг 2: Релаксация рёбер |V| - 1 раз
    for _ in range(len(graph) - 1):
        for u, neighbors in graph.items():
            for v, weight in neighbors.items():
                if distance[u] + weight < distance[v]:
                    distance[v] = distance[u] + weight
                    predecessor[v] = u

    # Шаг 3: Проверка на отрицательные циклы
    for u, neighbors in graph.items():
        for v, weight in neighbors.items():
            if distance[u] + weight < distance[v]:
                raise ValueError("Граф содержит отрицательный цикл.")

    return distance, predecessor

# Пример использования
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'C': 2, 'D': 2},
    'C': {},
    'D': {'A': 1}
}

source = 'A'

# Вызов функции и вывод результатов
try:
    distances, predecessors = bellman_ford(graph, source)
    print("Кратчайшие расстояния от вершины", source)
    for node, dist in distances.items():
        print(f"До вершины {node}: {dist}")
    print("\nПредшественники:")
    for node, pred in predecessors.items():
        print(f"Для вершины {node}: {pred}")
except ValueError as e:
    print(e)
